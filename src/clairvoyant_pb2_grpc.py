# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import clairvoyant_pb2 as clairvoyant__pb2


class MonitoringServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HandleUpdateRequest = channel.unary_unary(
                '/clairvoyant.MonitoringServer/HandleUpdateRequest',
                request_serializer=clairvoyant__pb2.UpdateRequest.SerializeToString,
                response_deserializer=clairvoyant__pb2.StatusReply.FromString,
                )


class MonitoringServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HandleUpdateRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitoringServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HandleUpdateRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.HandleUpdateRequest,
                    request_deserializer=clairvoyant__pb2.UpdateRequest.FromString,
                    response_serializer=clairvoyant__pb2.StatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'clairvoyant.MonitoringServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MonitoringServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HandleUpdateRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clairvoyant.MonitoringServer/HandleUpdateRequest',
            clairvoyant__pb2.UpdateRequest.SerializeToString,
            clairvoyant__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CVServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HandleCVRequest = channel.unary_unary(
                '/clairvoyant.CVServer/HandleCVRequest',
                request_serializer=clairvoyant__pb2.CVRequest.SerializeToString,
                response_deserializer=clairvoyant__pb2.CVReply.FromString,
                )


class CVServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HandleCVRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CVServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HandleCVRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.HandleCVRequest,
                    request_deserializer=clairvoyant__pb2.CVRequest.FromString,
                    response_serializer=clairvoyant__pb2.CVReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'clairvoyant.CVServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CVServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HandleCVRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clairvoyant.CVServer/HandleCVRequest',
            clairvoyant__pb2.CVRequest.SerializeToString,
            clairvoyant__pb2.CVReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EdgeServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HandleDownloadRequest = channel.unary_unary(
                '/clairvoyant.EdgeServer/HandleDownloadRequest',
                request_serializer=clairvoyant__pb2.DownloadRequest.SerializeToString,
                response_deserializer=clairvoyant__pb2.DownloadReply.FromString,
                )


class EdgeServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HandleDownloadRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EdgeServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HandleDownloadRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.HandleDownloadRequest,
                    request_deserializer=clairvoyant__pb2.DownloadRequest.FromString,
                    response_serializer=clairvoyant__pb2.DownloadReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'clairvoyant.EdgeServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EdgeServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HandleDownloadRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clairvoyant.EdgeServer/HandleDownloadRequest',
            clairvoyant__pb2.DownloadRequest.SerializeToString,
            clairvoyant__pb2.DownloadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
