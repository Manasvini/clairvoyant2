// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package clairvoyantmeta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetadataServerClient is the client API for MetadataServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataServerClient interface {
	HandleRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type metadataServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServerClient(cc grpc.ClientConnInterface) MetadataServerClient {
	return &metadataServerClient{cc}
}

func (c *metadataServerClient) HandleRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clairvoyantmeta.MetadataServer/handleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServerServer is the server API for MetadataServer service.
// All implementations must embed UnimplementedMetadataServerServer
// for forward compatibility
type MetadataServerServer interface {
	HandleRequest(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedMetadataServerServer()
}

// UnimplementedMetadataServerServer must be embedded to have forward compatible implementations.
type UnimplementedMetadataServerServer struct {
}

func (UnimplementedMetadataServerServer) HandleRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRequest not implemented")
}
func (UnimplementedMetadataServerServer) mustEmbedUnimplementedMetadataServerServer() {}

// UnsafeMetadataServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServerServer will
// result in compilation errors.
type UnsafeMetadataServerServer interface {
	mustEmbedUnimplementedMetadataServerServer()
}

func RegisterMetadataServerServer(s grpc.ServiceRegistrar, srv MetadataServerServer) {
	s.RegisterService(&MetadataServer_ServiceDesc, srv)
}

func _MetadataServer_HandleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServerServer).HandleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clairvoyantmeta.MetadataServer/handleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServerServer).HandleRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataServer_ServiceDesc is the grpc.ServiceDesc for MetadataServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clairvoyantmeta.MetadataServer",
	HandlerType: (*MetadataServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "handleRequest",
			Handler:    _MetadataServer_HandleRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clairvoyant_meta.proto",
}
